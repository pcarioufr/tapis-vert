{% extends 'layout.jinja' %}

{% block head %}

    {% include 'blocks/cards.jinja' %}
    {% include 'blocks/users.jinja' %}

    <title>Tapis Vert {{room_id}}</title>

    <!-- WEBSOCKETS ------ ------ ------ ------ -->
    <script>

        let websocket = new WebSocket("/ws/{{room_id}}/{{user_id}}");

        websocket.onmessage = ( event => {
            
            let data = JSON.parse(event.data)
            for ( [key, value] of Object.entries(data)) { fire("websocket", key, value) }

        })

    </script>


{% endblock %}

{% block body %}

    <script>


        class Room {

            constructor(cards, users) {
                this.cards = cards
                this.users = users

            }

            update() {

                call('GET', '/api/v1/r/{{room_id}}')
                .then( r => r.json() )
                .then( r => {

                    let key, value
                    for ( [key, value] of Object.entries(r.room) ) {

                        if ( key.startsWith("user::") ) 
                        { this.users.add( key.substring(6), value ) }

                        if (key == "cards") 
                        { this.cards.refresh( JSON.parse(value) ) }

                    } 
                })
            }

        }


        function new_round() { 

            params = {
                'user': 'audry',
                'user': 'martin', 
                'user': 'melissa',
                'user': 'caro',
                'user': 'palo'
            }

        }

    </script>

    <h2> Welcome, {{user_id}}.</h2>
    <h2> Room {{room_id}}</h2>
    <h2 class=round> Round {{round_id}}</h2>


    <script>

        let CARDS = new Cards(document.body)
        let USERS = new Users(document.body)

        let ROOM = new Room(CARDS, USERS)

        ROOM.update()

        listen( null, "room:update", (throwerId, data) => 
            console.log(`heard event room:update`) 
        )

        listen( null, "user:online", (throwerId, user_id) => 
            USERS.online(user_id)
        )
        listen( null, "user:offline", (throwerId, user_id) =>
            USERS.offline(user_id) 
        )

        // websocket.onopen = ( _ => websocket.send("joined") )
        wsend(websocket, "joined")

    </script>

{% endblock %}

