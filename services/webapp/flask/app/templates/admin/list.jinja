<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Admin Tables</title>
    <link rel="stylesheet" href="{{ url_for('static', filename='styles/admin/list.css') }}" />
</head>
<body>

    <div class="containers">
        <!-- User Table -->
        <div class="container">
            <h1>User List</h1>
            <table id="userTable">
                <thead>
                    <tr id="userHeaders"></tr>
                </thead>
                <tbody id="userTableBody">
                    <!-- User data will be populated here -->
                </tbody>
            </table>
            <div id="userErrorMessage" class="error"></div>
        </div>

        <!-- Code Table -->
        <div class="container">
            <h1>Code List</h1>
            <table id="codeTable">
                <thead>
                    <tr id="codeHeaders"></tr>
                </thead>
                <tbody id="codeTableBody">
                    <!-- Code data will be populated here -->
                </tbody>
            </table>
            <div id="codeErrorMessage" class="error"></div>
        </div>

        <!-- UserCode Table -->
        <div class="container">
            <h1>User<>Code List</h1>
            <table id="user_codeTable">
                <thead>
                    <tr id="user_codeHeaders"></tr>
                </thead>
                <tbody id="user_codeTableBody">
                    <!-- UserCode data will be populated here -->
                </tbody>
            </table>
            <div id="user_codeErrorMessage" class="error"></div>
        </div>


    </div>

    <script>
        class TableConfig {
            constructor(apiEndpoint, tableId, errorId, headersId, headers, keys) {
                this.apiEndpoint = apiEndpoint;
                this.tableId = tableId;
                this.errorId = errorId;
                this.headersId = headersId;
                this.headers = headers;
                this.keys = keys;
            }

            // Initialize table headers
            initializeTableHeaders() {
                const headersRow = document.getElementById(this.headersId);
                headersRow.innerHTML = ''; // Clear existing headers
                this.headers.forEach(header => {
                    const th = document.createElement('th');
                    th.textContent = header;
                    headersRow.appendChild(th);
                });
            }

            // Fetch data from API
            async fetchData() {
                try {
                    const response = await fetch(this.apiEndpoint);
                    if (!response.ok) {
                        throw new Error('Failed to fetch data');
                    }
                    const data = await response.json();
                    this.populateTable(data);
                } catch (error) {
                    document.getElementById(this.errorId).textContent = 'Error: ' + error.message;
                }
            }

            // Populate the table with data
            populateTable(data) {
                const tableBody = document.getElementById(this.tableId);
                tableBody.innerHTML = ''; // Clear existing rows

                data.forEach(item => {
                    const row = document.createElement('tr');
                    
                    // Populate data cells based on config keys
                    this.keys.forEach(key => {
                        const cell = document.createElement('td');
                        cell.textContent = item[key] || 'N/A';
                        row.appendChild(cell);
                    });

                    // Add delete button
                    const actionCell = document.createElement('td');
                    const deleteButton = document.createElement('button');
                    deleteButton.textContent = 'Delete';
                    deleteButton.onclick = () => this.deleteEntry(item.id);
                    actionCell.appendChild(deleteButton);
                    row.appendChild(actionCell);

                    tableBody.appendChild(row);
                });
            }

            // Function to delete an entry by ID
            async deleteEntry(id) {
                try {
                    const response = await fetch(`${this.apiEndpoint}/${id}`, { method: 'DELETE' });
                    if (!response.ok) {
                        throw new Error('Failed to delete entry');
                    }
                    // Refresh data after deletion
                    this.fetchData();
                } catch (error) {
                    document.getElementById(this.errorId).textContent = 'Error: ' + error.message;
                }
            }
        }

        // Subclass for the User table
        class UserTable extends TableConfig {
            constructor() {
                super(
                    '/admin/api/v1/users',
                    'userTableBody',
                    'userErrorMessage',
                    'userHeaders',
                    ['id', 'name', 'status', 'code_id', 'Actions'],
                    ['id', 'name', 'status', 'code_id']
                );
            }
        }

        // Subclass for the Code table
        class CodeTable extends TableConfig {
            constructor() {
                super(
                    '/admin/api/v1/codes',
                    'codeTableBody',
                    'codeErrorMessage',
                    'codeHeaders',
                    ['id', 'user_id', 'Actions'],
                    ['id', 'user_id']
                );
            }
        }

        // Subclass for the User->Code table
        class UserCodeTable extends TableConfig {
            constructor() {
                super(
                    '/admin/api/v1/user_codes',
                    'user_codeTableBody',
                    'user_codeErrorMessage',
                    'user_codeHeaders',
                    ['user_id', 'code_id', 'Actions'],
                    ['user_id', 'code_id']
                );
            }
        }

        // Instantiate and initialize tables
        document.addEventListener('DOMContentLoaded', () => {

            const userTable = new UserTable();
            const codeTable = new CodeTable();
            const user_codeTable = new UserCodeTable();

            userTable.initializeTableHeaders();
            userTable.fetchData();

            codeTable.initializeTableHeaders();
            codeTable.fetchData();

            user_codeTable.initializeTableHeaders();
            user_codeTable.fetchData();


        });
    </script>

</body>
</html>
