{% extends 'layout.jinja' %}

{% block head %}

    <title>Tapis Vert::Admin</title>
    <link rel="stylesheet" href="{{ url_for('static', filename='styles/admin/list.css') }}" />

{% endblock %}

{% block body %}

    <div class="tables" id=tables>
        <!-- [ <div class="container"></div> ] -->
    </div>

    <template id=t-table>
        <div class="table">
            <h1></h1>
            <table>
                <thead> <tr> <!-- [ <th></th> ]--> </tr>    </thead>
                <tbody> <!-- [ <tr> [ <td></td> ] </tr> --> </tbody>                
            </table>
        </div>
    </template>

    <script>

        class Table extends Element {

            constructor(name, headers){

                super( build("t-table"), document.getElementById("tables"))

                this.select("h1").textContent = name;
                headers.forEach(header => {
                    const th = document.createElement('th');
                    th.textContent = header;
                    this.select("thead tr").append(th);
                });
            }

            add(items) { 
                const tr = document.createElement('tr');
                this.select("tbody").append(tr);
                items.forEach(item => {
                    const th = document.createElement('td');
                    th.innerHTML = item;
                    tr.append(th);
                });
            }
        }

        class UserTable extends Table {
        
            constructor() {
                super("Users", [ "id", "name", "code_id", "created at"])
            }

            fill() { 
                call('GET', '/admin/api/v1/users')
                .then( resp => resp.json() )
                .then( resp => {
                    for ( let u of resp ) {
                        const code_id = u.codes.length > 0 ? u.codes[0].id : null ;
                        this.add([u.id, u.name, code_id, date(u._created)]);
                    } 
                })
            }        
        }

        class RoomTable extends Table {
        
            constructor() {
                super("Rooms", [ "id", "name", "users", "created at"])
            }

            fill() { 
                call('GET', '/admin/api/v1/rooms')
                .then( resp => resp.json() )
                .then( resp => {
                    for ( let r of resp ) {
                        const user_ids = r.users.map(user => `${user.id}:${user.relation.role}`).join('<br>'); 
                        this.add([r.id, r.name, `<pre>${user_ids}</pre>`, date(r._created)]);
                    } 
                })
            }
        }


        const userTable = new UserTable();
        const roomTable = new RoomTable();

        document.addEventListener('DOMContentLoaded', () => {

            userTable.fill()
            roomTable.fill()

        });
    </script>

{% endblock %}

