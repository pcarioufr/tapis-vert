{% extends 'layout.jinja' %}

{% block debug %}

    <!-- {% if level == "DEBUG" %} -->
    <!-- DEBUG INFO -->
    
    <!-- user.id: {{user.id}} -->
    <!-- user.name: {{user.name}} -->
    <!-- is_authenticated: {{user.is_authenticated}} -->
    <!-- is_anonymous: {{user.is_anonymous}} -->

    <!-- Session Cookies -->
    {% for key, value in request_cookies.items() %}
    <!-- {{ key }}: {{ value }} -->
    {% endfor %}

    <!-- Session -->
    {% for key, value in session.items() %}
    <!-- {{ key }}: {{ value }} -->
    {% endfor %}

    <!-- {% endif %} -->

{% endblock %}

{% block head %}

    <title>Tapis Vert::{{room.name}}</title>

    {% include 'main/elements/room.jinja' %}
    {% include 'auth/self.jinja' %}

{% endblock %}

{% block body %}

    <!-- OBJECTS ------ ------ ------ ------ -->
    <script>

    const ROOM = {

        // Representation of the Room in the page footer
        eRoomFooterEntry: new RoomFooterEntry(),

        name(text)  { this.eRoomFooterEntry.name = text  },


    };

    const TABLE = {

        // Representation of the Table in the page 
        eTable: new Table()

    };

    const USERS = {

        // Stores the collection of users, indexed with their user_id
        _list: {},  

        _User: function() {

            // User's state, for reference
            this._name = null ;
            this._online = false ;
            this._role = "watcher"

            // Representation of the User in the page footer
            this.eUserFooter = new UserFooter() ;
            // this.eUserPawn = new Pawn() ;

            // Add deck to user
            this.eUserDeck = new Deck();
        
            // Remove all User's representations
            this._remove = function() {
                this.eUserFooter.remove() ;
                // this.eUserPawn.remove() ;
            } ;

            // Sets User's name
            this.name = function(name) {
                this._name = name ;
                this.eUserFooter.name = name ;
                // this.eUserPawn.name = name ;
            };

            // Sets User's online status
            this.online = function(bool) {
                this._online = bool ;
                this.eUserFooter.online = bool ;
                // this.eUserPawn.online = bool ;
            };

            // Sets User's role
            this.role = function(role) {
                this._role = role ;
                this.eUserFooter.role = role ;
                // this.eUserPawn.role = role ;
                console.log(`set role ${role} for user ${this._name}`)
            };

            // Assign card to user's deck
            this.assignCard = function(card) {
                this.eUserDeck.card = card.eCard.e;
            };

        },

        // Returns a User based on id
        get(user_id) { return this._list[user_id] },

        // Adds a new User
        add(user_id, name, online) {

            if (this._list[user_id]) 
                return console.warn(`User ${user_id} already registered: won't add`) ;

            this._list[user_id] = new this._User() ;

            // Initializes the User's elements
            this._list[user_id].name(name) ;
            this._list[user_id].online(online) ;

        },

        // Removes a User
        remove(user_id) {

            if (!this._list[user_id]) 
                return console.warn(`User ${user_id} not in room: can't remove`) ;

            this._list[user_id]._remove() ;
            delete this._list[user_id] ;
        },

        // Removes a User
        update(users) {

            let index, props
            for ( [index, props] of Object.entries(users) ) {

                let user_id = props["id"]
                console.log(`adding user ${user_id} to USERS`)
                this.add(user_id, props["name"]) ;

                props["relation"]["status"] == "online" ? 
                    this.get(user_id).online(true) :
                    this.get(user_id).online(false) ;

                this.get(user_id).role(props["relation"]["role"]) ;

            }
        }

    };


    const CARDS = {

        // Stores the collection of cards, indexed with their value
        _list: {},

        _Card: function(value, owner) {

            // Card's state, for reference
            this._peeked = false ;
            this._flipped = false ;
            
            // Representation of the Card on the Table
            this.eCard = new Card() ;

            this.eCard.owner = owner ; 
            this.eCard.value = value ;

            // Peeks the card
            this.peeked = function(bool) {
                this._peeked = bool ;
                this.eCard.peeked = bool ;
            };

            // Flips the card
            this.flipped = function(bool) {
                this._flipped = bool ;
                this.eCard.flipped = bool ; 
            };

        },

        // Returns a Card based on value
        get(value) { return this._list[value] ; },

        // Adds a new Card
        add(value, owner) {
            
            if (this._list[value])
                return console.warn(`Card ${value} already registered: can't add`) ;

            this._list[value] = new this._Card(value, owner) ;

        },


    };
    </script>


    <!-- LISTENERS ------ ------ ------ ------ -->
    <script>

    // Listens when a new user joins the room
    listen( "window", "user:joined", (throwerId, user_id) =>
        USERS.add(user_id, user_id, true)  
    )

    // Listens when a new user leaves the room
    listen( "window", "user:left", (throwerId, user_id) =>
        USERS.remove(user_id)  
    )

    // Listens when a room's user turns online
    listen( "window", "user:online", (throwerId, user_id) =>
        USERS.get(user_id).online(true)
    )

    // Listens when a user beocmes player
    listen( "window", "user:player", (throwerId, user_id) =>
        USERS.get(user_id).role("player")
    )

    // Listens when a user beocmes watcher
    listen( "window", "user:watcher", (throwerId, user_id) =>
        USERS.get(user_id).role("watcher")
    )

    // Listens when a user beocmes master
    listen( "window", "user:master", (throwerId, user_id) =>
        USERS.get(user_id).role("master")
    )

    // Listens when a room's user turns offline
    listen( "window", "user:offline", (throwerId, user_id) =>
        USERS.get(user_id).online(false)
    )

    // Listens for a new round 
    listen( "window", "round:new", (throwerId, user_id) =>
        USERS.add(user_id, user_id, true)  
    )



    const SELF = new SelfFooterEntry()
    let ROOMWS // Room WebSocket

    document.addEventListener('DOMContentLoaded', () => {

        // Join room
        call('POST', '/api/v1/rooms/{{room.id}}/join')

        // Initializes the Room
        call('GET', '/api/v1/rooms/{{room.id}}')
        .then( r => r.json() )
        .then( r => {

            // Process Users
            USERS.update(r["users"]) ;


            // Process Cards
            
            c = r["round"] ;
            
            let player
            for ( [player, props] of Object.entries(c) ) {
    
                cards = props["cards"]
                value = cards["value"]

                // get the user to whom assign the card
                let user = USERS.get(player);

                // create the card on the table
                CARDS.add(value, user._name) ;

                // if the user is in the room, assign the card to the user
                if (user) {

                    let card = CARDS.get(value);
                    user.assignCard(card);
                    // user.addPawn();
                    
                    if ("{{user.id}}" == player) {
                        CARDS.get(value).peeked(value, true);
                    }
                    CARDS.get(value).flipped(true);

                    console.log(`adding card ${value} to user ${player}`)
                } else {
                    console.warn(`User ${player} not in room, can't assign card/pawn`);
                }

            } 

        })
        .then( _ => {
            // Room's websocket
            ROOMWS = new EventWebSocket("/ws/{{room.id}}/{{user.id}}") ;
            ROOMWS.wsend("hello") ;
        })

    });

    </script>


{% endblock %}

