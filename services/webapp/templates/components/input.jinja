<!-- INPUTS -->

    <link rel="stylesheet" href="{{ url_for('static', filename='styles/input.css') }}" />


    <template id=t-field>
        <div class="field">
            <div class="c-title">
                <div class="title"><!-- SVG --></div>
                <div class="icon"><!-- SVG --></div>
            </div>
            <!-- Input goes here -->
            <div class="feedback"></div> 
        </div>
    </template>

    <script>

    class Input extends Element {
        
        constructor(eParent=null) {

            super( build("t-field"), eParent )
            this.svg = null

        }

        set title(title) { this.select(".title").innerHTML = title }
        
        set message(message=null) {
            message ? 
            this.select(".message").innerText = message : 
            this.select(".message").innerText = "" ; 
        }

        set status(status) {
            
            this.untag("load") ; this.untag("tip") ;
            this.untag("ok")   ; this.untag("error")

            switch(status) {
                case "load":  this.svg = new SVG("loader-2-line")      ; this.tag("load")  ; break ;
                case "ok":    this.svg = new SVG("check-line")         ; this.tag("ok")    ; break ;
                case "tip":   this.svg = new SVG("lightbulb-line")     ; this.tag("tip")   ; break ;
                case "error": this.svg = new SVG("error-warning-line") ; this.tag("error") ; break ;
            }

            this.select(".icon").replaceChildren()
            this.select(".icon").append(this.svg.e) 

        }

    }
    </script>


    <template id=t-text-input>
        <div class="text-input">
            <input/>
            <!-- button goes here -->
        </div>
    </template>


    <script>
    class TextInput extends Input { 
        
        constructor(eParent=null) {
            
            super(eParent)
            this.tag("text")

            this.select(".c-title").after(build("t-text-input"))

        }
        
        get value()       { return this.select("input").value }
        set value(value)  { this.select("input").value = value }

        set spellcheck(bool) {
            bool ?
                this.select("input").removeAttribute("spellcheck") : 
                this.select("input").setAttribute("spellcheck", "false") ;
        }

        set password(bool) {

            if (bool) {

                this.select("input").setAttribute("type", "password") ;
                
                let svg = new SVG("eye-off-line") ;
                this.e.append(svg.e) ;

                svg.onclick = ( _ => {
                    const e = this.select("input") ;
                    if (e.type === 'password') 
                         { e.type = 'text'      ; svg.icon = "eye-line" ; }
                    else { e.type = 'password'  ; svg.icon = "eye-off-line" ; } 
                })

            }
            else {
                this.select("input").removeAttribute("type") ;
                this.select("svg").remove() ;
            }

        }

        set autocomplete(name) {
            this.select("input").setAttribute("autocomplete", name) ;
        }

        set placeholder(placeholder) { this.input.e.setAttribute("placeholder", placeholder) }

        set button(button) { 
            this.select(".text-input").setAttribute("button","")
            this.select(".text-input").append(button.e) 
        }

    }

    </script>

    <template id=t-extended-text-input>
        <div class="extended-text-input">
            <textarea style="resize: none;"></textarea>
            <!-- button goes here -->
        </div>
    </template>

    <script>

    class ExtendedTextInput extends Input { 
        
        constructor(eParent=null) {
            
            super(eParent)
            this.tag("extended-text")

            this.select(".c-title").after(build("t-extended-text-input"))

        }
        
        get value()       { return this.select("textarea").value }
        set value(value)  { this.select("textarea").value = value }

        set placeholder(placeholder) { this.select("textarea").setAttribute("placeholder", placeholder) }

        set button(button) { 
            this.select(".extended-text-input").setAttribute("button","")
            this.select(".extended-text-input").append(button.e) 
        }

    }
    </script>

