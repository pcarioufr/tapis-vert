<!-- EVENTS ------ ------ ------ ------ -->

    <script>

    /**
    * Each listener is stored as an object:
    * {
    *   listenerId: string,
    *   pattern: string,  // can be exact name or pattern with wildcards
    *   callback: function
    * }
    */
    const LISTENERS = [];

    /**
    * Fire: triggers any listener whose pattern matches the eventName.
    * @param {string} throwerId
    * @param {string} eventName
    * @param {*} data
    */
    function fire(throwerId, eventName, data = null) {
        // Loop through all listener entries
        LISTENERS.forEach(({ listenerId, pattern, callback }) => {
            if (eventMatchesPattern(eventName, pattern)) {
                callback.call(this, throwerId, data, eventName);
            }
        });
    }

    /**
    * Listen: register a callback for an event name or a wildcard pattern.
    * @param {string} listenerId
    * @param {string} pattern
    * @param {function} callback
    */
    function listen(listenerId, pattern, callback) {
        if (typeof listenerId !== 'string' || listenerId.trim() === '') {
            throw new Error("Listener ID must be a non-empty string.");
        }
        if (typeof pattern !== 'string' || pattern.trim() === '') {
            throw new Error("Event pattern must be a non-empty string.");
        }

        // Create a new listener entry
        LISTENERS.push({
            listenerId,
            pattern,
            callback
        });
    }

    /**
    * Ignore: unregister a listener from a given pattern (or exact event).
    * @param {string} listenerId
    * @param {string} pattern
    */
    function ignore(listenerId, pattern) {
        if (typeof listenerId !== 'string' || listenerId.trim() === '') {
            throw new Error("Listener ID must be a non-empty string.");
        }
        if (typeof pattern !== 'string' || pattern.trim() === '') {
            throw new Error("Event pattern must be a non-empty string.");
        }

        // Filter out the matching listener(s)
        for (let i = LISTENERS.length - 1; i >= 0; i--) {
            const entry = LISTENERS[i];
            if (entry.listenerId === listenerId && entry.pattern === pattern) {
                LISTENERS.splice(i, 1);
            }
        }
    }

    /**
    * Helper: Does the eventName match a given pattern?
    * - If pattern has no special wildcard characters, it must match exactly.
    * - If pattern contains wildcard(s) like '*', we do a simple conversion to RegExp.
    *
    * @param {string} eventName
    * @param {string} pattern
    * @returns {boolean}
    */
    function eventMatchesPattern(eventName, pattern) {
        // Quick optimization if there's no wildcard in the pattern
        if (!pattern.includes('*')) {
            return (eventName === pattern);
        }

        // Convert the pattern to a RegExp: 
        // 1) Escape all regex meta-characters except `*`.  
        // 2) Replace `*` with `.*` 
        // 3) Anchor ^ and $
        const regexStr = '^' + pattern
            .replace(/[.+?^${}()|[\]\\]/g, '\\$&') // Escape everything except '*'
            .replace(/\*/g, '.*') + '$';

        const regex = new RegExp(regexStr);
        return regex.test(eventName);
    }


    </script>


    <!-- WEBSOCKETS ------ ------ ------ ------ -->

    <script>

    class EventWebSocket extends WebSocket {


        constructor(url) {

            super(url);  // Call the WebSocket constructor

            this._url = url;
            this.maxReconnectAttempts = 10;
            this.reconnectAttempt = 0;
            this.baseDelay = 1000;
            this.maxDelay = 30000;
            this.isReconnecting = false;

            this.onmessage = (event) => {
                let [key, value] = event.data.split('::', 2);  // Split only at the first occurrence of '::'
                
                // If value looks like JSON (starts with `{` or `[`), parse it
                try { 
                    value = JSON.parse(value); 
                } catch (e) { /* If not JSON, just use raw value */ }

                fire("websocket", key, value);
            };

            this.onopen = () => {
                console.log("WebSocket connection established");
            };

            this.onclose = (event) => {
                console.log("WebSocket connection closed");
                if (!event.wasClean && !this.isReconnecting) {
                    this.tryReconnect();
                }
            };

            this.onerror = (error) => {
                console.error("WebSocket error:", error);
            };
        }

        // this.send(), but waiting for the websocket connection to open.
        // key will be prefixed by user:{{user.id}}: by the server
        wsend(key, value, timeout = 5000) {

            const startTime = Date.now();

            const interval = setInterval(
                
                _ => {

                    if (this.readyState === 1) {  // Check if WebSocket is open
                        clearInterval(interval);
                        this.send(`${key}::${value}`); 
                    } 
                    else if (Date.now() - startTime > timeout) {  // Check if timeout exceeded
                        clearInterval(interval); 
                        console.error('WebSocket connection timed out. Message not sent.');
                    }

                }, 
                5 // Check every 5 milliseconds
            );  

        }

        tryReconnect() {
            if (this.reconnectAttempt >= this.maxReconnectAttempts) {
                console.error("Max reconnection attempts reached.");
                return;
            }
            this.isReconnecting = true;
            this.reconnectAttempt++;
            const delay = Math.min(
                this.baseDelay * Math.pow(2, this.reconnectAttempt - 1),
                this.maxDelay
            );
            console.log(`Reconnecting in ${delay / 1000}s...`);

            setTimeout(() => {
                const newWs = new EventWebSocket(this._url);
                // preserve existing handlers
                newWs.onmessage = this.onmessage;
                newWs.onerror   = this.onerror;
                newWs.onclose   = (e) => {
                    if (!e.wasClean) { this.tryReconnect(); }
                };
                newWs.onopen = () => {
                    console.log("Reconnected!");
                    this.isReconnecting = false;
                    this.reconnectAttempt = 0;
                    Object.assign(this, newWs);
                };
            }, delay);
        }
  
        disconnect() {
            this.isReconnecting = false;
            if (this.readyState === WebSocket.OPEN || this.readyState === WebSocket.CONNECTING) {
                this.close();
                console.log("WebSocket connection closed by client.");
            } else {
                console.log("WebSocket is already closed.");
            }
        }


    }

    </script>
