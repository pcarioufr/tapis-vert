

/* TABLE ***** ***** ***** ***** ***** ***** ***** ***** */

.table {
    position: relative;

    --card-w: 16vw; /* card width */
    --card-h: 22vw; /* card height */
    --card-c: 8vw;  /* card corner size */      
    --card-r: 0deg; /* Initial rotation, not used yet */

    display: flex;
    flex-direction: row;

}

.table .area {
    position: relative;
    width: 20vw;
    height: 20vw;
    border-radius: 2vw;
    margin: auto;
    display: flex;
    flex-direction: row;
    flex-wrap: wrap;
    justify-content: center;
    gap: 3vw;
}

.table .area svg {
    position: absolute;
    width: 80%;
    height: 80%;
    top:10%;
    left:10%;
    fill: var(--green)
}


.table .playground {
    position: relative;
    display: flex;
    flex-direction: row;
    flex-wrap: wrap;
    justify-content: center;
    gap: 3vw;
    margin: auto;
    width: 60vw;

}


/* PAWNS ***** ***** ***** ***** ***** ***** ***** ***** */


.pawn {
    z-index: 10;
    position: relative ;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    filter: drop-shadow( 1vw 1vw 0.5vw rgba(0, 0, 0, 0.5));
    margin: 1vw ;
}

.pawn .head {
    z-index: 1;
    width: 1vw;
    height: 1vw;
    position: relative;
    right: -1vw;
    background-color: var(--beige);
    border-radius: 50%;
    margin-bottom: -0.3vw;
}

.pawn .body {
    width: 1.4vw;
    height: 1vw;
    position: relative;
    right: -1vw;
    background-color: var(--beige);
    border-radius: 4vw 4vw 1vw 1vw;
}

.pawn .label {
    position: relative;
    display: flex;
    flex-direction: column;
    align-items: center;
    height: 2vw;
    width: fit-content ;
    top: -0.3vw;
}


.pawn span.name {
    color: var(--dblue);
    font-size: 1.1vw;
    text-align: right;
    margin: auto;
    padding-right: 0.5vw;
    padding-left: 0.5vw;
    border-radius: 0.5vw;
    background: var(--beige);
}

.pawn div.status {
    width: 4vw;
    height: 0.3vw;
    background: var(--red);
    border-radius: 0.5vw;
    position: relative;
    border-radius: -0.3vw;
}

.pawn div.status[online] {
    background: var(--green);
}



/* USERS ***** ***** ***** ***** ***** ***** ***** ***** */


.room-footer-panel {
    display: flex;
    flex-direction: column;
    align-items: stretch;
    gap: 1vw
}

.room-footer-panel > * {
    margin: auto;
}

.room-footer-panel .qrcode {
    display: flex;
    flex-direction: column;
    align-items: center;
    background: var(--beige);
    overflow: hidden;
}

.room-footer-panel .qrcode img {
    margin-left: auto;
    margin-right: auto;
    display: flex;
    height: 12vw;
    width: 12vw;
}


.room-footer-panel .users {
    display: flex;
    flex-direction: column;
    justify-content: center;
    gap: 0.5vw;
    position: relative;
    margin: auto;
}

.room-footer-panel .user {
    display: flex;
    align-items: center;
    background: var(--beige);
    height: 2.5vw;
    width: 10vw ;
    position: relative;
    border-radius: 0.5vw
}

.room-footer-panel .user span.name {
    color: var(--dblue);
    font-size: 1.5vw;
    text-align: right;
    margin: auto;
}

.room-footer-panel .user div.status {
    width: 8px;
    height: 8px;
    margin-right: 8px;
    margin-top: auto;
    margin-bottom: auto;
    background: var(--red);
}

.room-footer-panel .user div.status[online] {
    background: var(--green);
}



/* CARDS ***** ***** ***** ***** ***** ***** ***** ***** */

/* Container for the card */
.deck {
    width: var(--card-w);
    height: var(--card-h);
    position: relative;
}

.deck .card-slot {
    width: var(--card-w);
    height: var(--card-h);
    position: relative;
    cursor: pointer;
    filter: drop-shadow(0.4vw 0.4vw 0.2vw rgba(0, 0, 0, 0.5))
}


/* Card */
.card {
    width: 100%;
    height: 100%;
    position: relative;
    transform-style: preserve-3d; /* Ensures both front and back are in 3D */
    transition: transform 0.6s; /* Flip animation */

    transform: rotateZ( var(--card-r) );
    
}

/* When the card is flipped */
[flipped].card {
    transform: rotateZ( var(--card-r) ) rotateY(180deg); /* Flip the card */
}

/* Card faces */
.card .face {
    position: absolute;
    width: 100%;
    height: 100%;
    backface-visibility: hidden;
    display: flex;
    justify-content: center;
    align-items: center;
    color: white;
    border-radius: 2vw;
}

/* Front of the card */
.card .face.front {
    background-color: var(--beige);
    clip-path: polygon( 
        0% 0%, 
        0% 100%, 
        calc( 100% - var(--card-c)) 100%, 
        100% calc(100% - var(--card-c)), 
        100% 0%    
    );
    font-size: 12vw;
    color: var(--dblue);

}

/* Back face of the card */
.card .face.back {

    position: absolute;
    width: 100%;
    height: 100%;

    transform: rotateY(180deg); /* The back face is rotated backwards initially */
    backface-visibility: hidden;

    background: var(--bblue) ; /* This is overriden by [peeked] section */
    font-size: 3vw;
    color: var(--beige);

    border-color: var(--beige);
    border-style: solid;
    border-width: 2px;
    box-sizing: border-box;

}

/* CARD CORNERS & PEEKING EFFECT */

/* Clipping cards to leave room for peeking corner */
/*
.card .face.back {
    clip-path: polygon( 0% 0%, 0% calc( 100% - var(--card-c)), var(--card-c) 100%, 100% 100%, 100% 0% );
}
.card .face.front {
    clip-path: polygon( 0% 0%, 0% 100%, calc( 100% - var(--card-c)) 100%, 100% calc(100% - var(--card-c)), 100% 0% );
}
*/
.card .face.back {
    clip-path: polygon( 
                    0% 0%, 
                    0% calc( 100% - var(--card-c)), 
                    var(--card-c) 100%, 
                    100% 100%, 
                    100% var(--card-c), 
                    calc( 100% - var(--card-c)) 0%, 
                    100% 0% 
                );
}
.card .face.front {
    clip-path: polygon( 
                    0% var(--card-c),
                    0% 100%,
                    calc( 100% - var(--card-c)) 100%,
                    100% calc(100% - var(--card-c)), 
                    100% 0%,
                    var(--card-c) 0%
                );
}


/* Corner */
.card .cornerDW {
    position: absolute;
    width: var(--card-c);
    height: var(--card-c);
    border-radius: 0 0 2vw 0;
    bottom: 0;
    right: 0;
    transform-origin: center center;
    transform: rotate3d(1, 1, 0, 0deg); /* No initial rotation */
    transition: transform 0.5s ease-in-out;
    will-change: transform;
    clip-path: polygon(100% 0, 0 100%, 100% 100%)
}

/* Front corner */
.card .cornerDW.front {
    background-color: var(--beige); /* Back color */
    backface-visibility: hidden;
    display: flex;
}

.card .cornerDW.front span {
    position: relative;
    margin: auto;
    transform: rotate(135deg);
    padding-bottom: 4vw;
    font-size: 3vw;
    color: var(--dblue);
}

/* Back corner */
.card .cornerDW.back {
    background-color: var(--dblue); /* Back color */
    backface-visibility: hidden;
    transform: rotate3d(0, 1, 0, 180deg) rotate3d(0, 0, 1, 90deg);

    border-color: var(--beige);
    border-style: solid;
    border-width: 2px;
    box-sizing: border-box;

}


/* Front corner lifts and back of the corner is revealed */
[flipped][peeked].card .cornerDW.front {
    transform: rotate3d(-1, 1, 0, 130deg); /* Rotate to lift the corner */
}

/* Back corner follows the movement */
[flipped][peeked].card .cornerDW.back {
    transform: rotate3d(0, 1, 0, 180deg) rotate3d(0, 0, 1, 90deg) rotate3d(-1, 1, 0, -130deg); 
}


/* Corner */
.card .cornerUP {
    position: absolute;
    width: var(--card-c);
    height: var(--card-c);
    border-radius: 2vw 0 0 0;
    top: 0;
    left: 0;
    transform-origin: center center;
    transform: rotate3d(1, 1, 0, 0deg); /* No initial rotation */
    transition: transform 0.5s ease-in-out;
    will-change: transform;
    clip-path: polygon(0 0, 0 100%, 100% 0)
    
}


/* Front corner */
.card .cornerUP.front {
    background-color: var(--beige); /* Back color */
    backface-visibility: hidden;
    display: flex;
}

.card .cornerUP.front span {
    position: relative;
    margin: auto;
    transform: rotate(-45deg);
    padding-bottom: 4vw;
    font-size: 3vw;
    color: var(--dblue);
}

/* Back corner */

@property --p3 {
    syntax: '<percentage>';
    inherits: false;
    initial-value: 2%;
 }

@property --p4 {
    syntax: '<percentage>';
    inherits: false;
    initial-value: 5%;
}

.card .cornerUP.back {
    backface-visibility: hidden;
    transform: rotate3d(0, 1, 0, 180deg) rotate3d(0, 0, 1, 90deg);

    background: radial-gradient(
        ellipse
        calc(120% + 75% * cos(var(--card-r) + 135deg))
        calc(60% + 30% * sin(var(--card-r) + 135deg))
        at bottom right,
        var(--bblue) var(--p3),
        var(--dblue) var(--p4)
    );
    transition: --p3 0.5s ease-in-out, --p4 0.5s ease-in-out, transform 0.5s ease-in-out;

    border-color: var(--beige);
    border-style: solid;
    border-width: 2px;
    box-sizing: border-box;

}

[peeked].card .cornerUP.back {
    --p3: 80%;
    --p4: 170%;
}


/* Front corner lifts and back of the corner is revealed */
[flipped][peeked].card .cornerUP.front {
    transform: rotate3d(-1, 1, 0, -70deg); /* Rotate to lift the corner */
}

/* Back corner follows the movement */
[flipped][peeked].card .cornerUP.back {
    transform: rotate3d(0, 1, 0, 180deg) rotate3d(0, 0, 1, 90deg) rotate3d(-1, 1, 0, -70deg); 
}


/* Shadow effect on peeked card */

@property --p1 {
    syntax: '<percentage>';
    inherits: false;
    initial-value: 2%;
 }

@property --p2 {
    syntax: '<percentage>';
    inherits: false;
    initial-value: 5%;
}

.card .face.back {
    background: 
    radial-gradient(
        ellipse 
        calc(120% + 75% * cos(var(--card-r) - 45deg)) calc(60% + 30% * sin(var(--card-r) - 45deg)) 
        at bottom left, 
        var(--bblue) var(--p1), 
        var(--dblue) var(--p2),
        transparent 80%
    ),
    radial-gradient(
        ellipse
        calc(120% + 75% * cos(var(--card-r) + 135deg))
        calc(60% + 30% * sin(var(--card-r) + 135deg))
        at top right,
        var(--bblue) var(--p1),
        var(--dblue) var(--p2),
        transparent 80%
    ), var(--dblue);
    transition: --p1 0.5s, --p2 0.5s;

}

[peeked].card .face.back {
    --p1: 30%;
    --p2: 60%;
}


.deck .pawn-slot{
    position: absolute;
    top: -20%;
    left: 75%
}