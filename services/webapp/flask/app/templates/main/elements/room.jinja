<!-- VIEWS ------ ------ ------ ------ ------ ------ ------ -->

    <link rel="stylesheet" href="{{ url_for('static', filename='styles/elements/room.css') }}">


    <!-- RoomFooterEntry -->

    <template id=t-room-footer-panel>
        <div class="room-footer-panel">
            <span class="title">invite</span>
            <div class="c-qrcode"></div>
            <span class="title">masters</span>
            <div class="masters" id="footer-masters">
                <!-- Array of [ UserFooter ] -->
            </div>
            <span class="title">players</span>
            <div class="users" id="footer-players">
                <!-- Array of [ UserFooter ] -->
            </div>
            <span class="title">watchers</span>
            <div class="users" id="footer-watchers">
                <!-- Array of [ UserFooter ] -->
            </div>
            <div class="c-round" id="footer-round">
                <!-- Button for New Round -->
            </div>
        </div>
    </template>
    <script>

    class RoomFooterEntry extends FooterEntry {

        constructor() {

            super( "right-entries" )
            this.panel = build("t-room-footer-panel")
            
            let qr = new QRCode(this.footerPanel.select(".c-qrcode"))
            qr.updateLink("https://{{host}}/r/{{room.id}}")

            this.icon = "group-2-line"
            this.name = "{{room.name}}"


            this.newRound = new Button()

            this.footerPanel.select(".c-round").append(this.newRound.e)
            this.newRound.name = "new round"
            this.newRound.icon = "refresh-line"
            this.newRound.color = "green"

            this.newRound.callback = ( async _ => {

                await call('POST', '/api/v1/rooms/{{room.id}}/round')

            })

        }

    }
    </script>


    <!-- UserFooter -->
    
    <template id=t-user>
        <div class="user">
            <span class=name></span>
            <div class=status rounded></div>
        </div>
    </template>
    <script>
    class UserFooter extends Element {

        constructor(){

            super( build("t-user") )
            console.log("UserFooter created")

        }

        set name(text)      { this.select(".name").innerText = text ; }

        set status(status)  { status == "online" ? 
                                this.select(".status").setAttribute("online", "") : 
                                this.select(".status").removeAttribute("online") 
                            }

        set role(role)          {
            let parent 
            switch(role) {
                case "master":  parent = document.getElementById("footer-masters")  ; break ;
                case "player":  parent = document.getElementById("footer-players")  ; break ;
                case "watcher": parent = document.getElementById("footer-watchers") ; break ;
                default:
                    console.error(`Role "${role}" isn't supported option for user`);
                    return
            }
            console.log(`User ${this.select(".name").innerText} moved to "${role}s"`);
            parent.append(this.e)
        }


    }
    </script>



    {# <!-- Pawn -->

    <template id=t-pawn>
        <div class="pawn">
            <div class="head"></div>
            <div class="body"></div>
            <div class="label">
                <span class="name"></span>
                <div class="status"></div>
            </div>
        </div>
    </template>

    <script>

    class Pawn extends Element {

        constructor(){

            super( build("t-pawn"), document.getElementById("table-area"))

        }

        set name(text)      { this.select(".name").innerText = text ; this.id = text}

        set role(role)      { console.warn("Pawn.role() method not implemented")}

        set status(status)  { status == "online" ? 
                                this.select(".status").setAttribute("online", "") : 
                                this.select(".status").removeAttribute("online") 
                            }

    }
    </script> #}



    <!-- Deck -->

    <template id=t-deck>
        <div class="deck">
            <div class="card-slot"> <!-- Card --> </div>
            <div class="pawn-slot"> <!-- Pawn --> </div>
        </div>
    </template>

    <script>

    class Deck extends Element {

        constructor(){

            super( build("t-deck"), document.getElementById("table-playground"))

        }

        set pawn(element)  {
            this.select(".pawn-slot").append(element)
        }

        set card(element) {
            this.select(".card-slot").append(element)
        }
        
    }
    </script>


    <!-- Card -->

    <template id=t-card>
        <div class="card"> <!-- [flipped], [peeked] -->    
            <div class="face front" noselect></div>
            <div class="face back" noselect></div>
            <div class="card-corner lower front" noselect>
                <span></span>
            </div>
            <div class="card-corner lower back"></div>

            <div class="card-corner upper front" noselect>
                <span></span>
            </div>
            <div class="card-corner upper back"></div>
        </div>
    </template>

    <script>
    class Card extends Element {

        constructor(card_id){

            // debounce the PATCH request for lower-peeked
            const dPeeked = debounce(value => 
                call("PATCH", "/api/v1/rooms/{{room.id}}", { [`cards.${card_id}.peeked.{{user.id}}`]: value }), 
                300
            );

            // debounce the PATCH request for flipped
            const dFlipped = debounce(value => 
                call("PATCH", "/api/v1/rooms/{{room.id}}", { [`cards.${card_id}.flipped`]: value }),
                300
            );

            super( build("t-card") )

            // Toggle the corner peek effect on click
            this.select('.face.back').addEventListener('click', _ => {

                this.toggle('peeked-lower');
                dPeeked( this.is("peeked-lower") ? "True" : "False" ) ;

            });

            // Flips the card on double-click
            this.e.addEventListener('dblclick', _ => {

                this.untag('peeked-lower');  // no peek while flipping the card
                this.untag('peeked-upper');  // no peek while flipping the card
                dPeeked( "False" ) ;

                this.toggle('flipped');
                dFlipped( this.is("flipped") ? "True" : "False" ) ;

            });

        }

        set owner(text)      { 
                                this.select(".face.back" ).innerText = text 
                                // this.select(".back  span.name" ).innerText = text
                            }
        set value(text)     {   
                                this.select(".face.front").innerText = text
                                this.select(".lower.front span").innerText = text 
                                this.select(".upper.front span").innerText = text 
                            }

        set peekedL(bool)  { bool ? this.tag("peeked-lower")  : this.untag("peeked-lower")  ; }
        set peekedU(bool)  { bool ? this.tag("peeked-upper")  : this.untag("peeked-upper")  ; }
        
        set flipped(bool) { bool ? this.tag("flipped") : this.untag("flipped") ; }

    }
    </script>


    <!-- Table -->

    <template id=t-table>
        <div class="table" id="table">
            <!-- <div class="area" id="table-area"> -->
                <!-- SVG Crown-->
                <!-- [ Pawns ] -->
            <!-- </div> -->
            <div class="playground" id="table-playground">
                <!-- [ Cards ] -->
            </div>
        </div>
    </template>
    <script>
    class Table extends Element {

        constructor(){

            super( build("t-table"), document.body)

            this.svg = new SVG("crown-line")
            // this.select(".area").append(this.svg.e)

        }

        empty() { this.e.querySelectorAll('*').forEach( n => n.remove() ); }

    }
    </script>