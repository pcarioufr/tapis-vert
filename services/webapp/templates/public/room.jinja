{% extends 'layout.jinja' %}

{% block debug %}

    <!-- {% if level == "DEBUG" %} -->
    <!-- DEBUG INFO -->
    
    <!-- user.id: {{user.id}} -->
    <!-- user.name: {{user.name}} -->
    <!-- is_authenticated: {{user.is_authenticated}} -->
    <!-- is_anonymous: {{user.is_anonymous}} -->

    <!-- Session Cookies -->
    {% for key, value in request_cookies.items() %}
    <!-- {{ key }}: {{ value }} -->
    {% endfor %}

    <!-- Session -->
    {% for key, value in session.items() %}
    <!-- {{ key }}: {{ value }} -->
    {% endfor %}

    <!-- {% endif %} -->

{% endblock %}

{% block head %}

    <title>Tapis Vert::{{room.name}}</title>

    <script type="text/javascript" src="{{ url_for('static', filename='libs/websocket.js') }}"></script>

        {% include 'components/table.jinja' %}
    {% include 'components/cards.jinja' %}
    {% include 'components/chat.jinja' %}



{% endblock %}

{% block body %}

    <!-- Panel User Template -->
    <template id="t-panel-user">
        <div class="panel-user">
            <span class="user-name"></span>
            <div class="user-status"></div>
        </div>
    </template>

    <!-- User Panel Content Template -->
    <template id="t-user-panel-content">
        <span class="panel-title">Account</span>
        
        <div class="account-cookies">
            <div class="cookie-switch-container"></div>
        </div>
        
        {% if user.is_authenticated %}
        <div class="account-authenticated">
            <p>Logged in as: <strong>{{user.name}}</strong></p>
            <div class="logout-container"></div>
        </div>
        {% else %}
        <div class="account-login">
            <div class="login-container"></div>
        </div>
        {% endif %}
    </template>

    <!-- Room Panel Content Template -->
    <template id="t-room-panel-content">
        <span class="panel-title">{{room.name}}</span>
        
        <div class="room-invite">
            <h3>Invite</h3>
            <div class="qr-container"></div>
        </div>
        
        <div class="room-users">
            <h3>Users</h3>
            
            <div class="user-group" id="panel-users-masters">
                <div class="group-header"> <span>masters</span> </div>
                <div class="user-list"></div>
            </div>
            
            <div class="user-group" id="panel-users-players">
                <div class="group-header"> <span>players</span> </div>
                <div class="user-list"></div>
            </div>
            
            <div class="user-group" id="panel-users-watchers">
                <div class="group-header"> <span>watchers</span> </div>
                <div class="user-list"></div>
            </div>
        </div>
    </template>

    <!-- Floating Role Selection Buttons will be created by JavaScript -->

    <script type="module">

    class PanelUser extends Element {
        
        constructor(eParent = null) {
            super(build("t-panel-user"), eParent);
        }
        
        set name(text) {
            this.select('.user-name').innerText = text;
        }
        
        set status(status) {
            const statusEl = this.select('.user-status');
            status === "online" ? 
                statusEl.setAttribute("online", "") : 
                statusEl.removeAttribute("online");
        }
        
        set role(role) {
            // Move user to appropriate role section
            let targetContainer;
            switch(role) {
                case "master":  targetContainer = document.querySelector("#panel-users-masters .user-list"); break;
                case "player":  targetContainer = document.querySelector("#panel-users-players .user-list"); break;
                case "watcher": targetContainer = document.querySelector("#panel-users-watchers .user-list"); break;
                default:
                    console.error(`Role "${role}" isn't supported option for user`);
                    return;
            }
            if (targetContainer) {
                targetContainer.append(this.e);
            }
        }
    }

    class UserPanel extends Panel {
        
        constructor(side, icon) {
            super(side, icon);
            this.setText('{{user.name if user.is_authenticated else "Account"}}');
            this.e.classList.add('user-panel');
            this.setContentFromTemplate('t-user-panel-content');
            this.initializeComponents();
        }
        
        initializeComponents() {
            // Cookie Switch Setup
            const cookies = new Cookies();
            const cookieSwitch = new Switch(this.select('.cookie-switch-container'));
            
            cookies.get("ok_cookie") == "yes" ? 
                cookieSwitch.checked = true : 
                cookieSwitch.checked = false;
            
            cookieSwitch.onCallback = (_ => cookies.set("ok_cookie", "yes"));
            cookieSwitch.onText = "I Accept Cookies";
            cookieSwitch.offCallback = (_ => cookies.delete("ok_cookie"));
            cookieSwitch.offText = "I Reject Cookies";

            {% if user.is_authenticated %}
            // Logout button for authenticated users
            const logoutButton = new Button();
            this.select('.logout-container').append(logoutButton.e);
            logoutButton.name = "log out";
            logoutButton.icon = "logout-circle";
            logoutButton.color = "red";
            
            logoutButton.callback = (async _ => {
                try {
                    const resp = await call('POST', '/api/auth/logout', { user_id: "{{user.id}}" });
                    const data = await resp.json();
                    
                    if (data.success) {
                        window.location.reload();
                    } else {
                        throw new Error(data.message || 'Logout failed');
                    }
                } catch (error) {
                    console.error('Logout failed:', error);
                }
            });
            {% else %}
            // Login components for unauthenticated users
            const codeInput = new TextInput();
            this.select('.login-container').append(codeInput.e);
            
            codeInput.title = "password";
            codeInput.password = true;
            codeInput.autocomplete = "current-password";
            
            const loginButton = new Button();
            codeInput.e.after(loginButton.e);
            loginButton.name = "log in";
            loginButton.icon = "login-circle";
            loginButton.color = "green";
            
            loginButton.callback = (async _ => {
                const resp = await call('POST', '/api/auth/login', { code_id: codeInput.value });
                const data = await resp.json();
                // Handle login response
            });
            {% endif %}
        }
    }

    class RoomPanel extends Panel {
        
        constructor(side, icon) {
            super(side, icon);
            this.setText('{{room.name}}');
            this.e.classList.add('room-panel');
            this.setContentFromTemplate('t-room-panel-content');
            this.initializeComponents();
        }
        
        initializeComponents() {
            // QR Code Setup for room sharing
            const qrCode = new QRCode(this.select('.qr-container'));
            qrCode.updateLink("https://{{host}}/r/{{room.id}}");
        }
    }

    // represntations of the room and its elements
    class RoomManager {

        constructor() {

            this.websocket = new EventWebSocket("/ws/{{room.id}}/{{user.id}}");
            listen( "RoomManager", "ws:reconnected", async (throwerId, websocket) => {
                this.websocket = websocket ;
                console.log("Roommanager using new websocket");
                await this.refresh() ;
                this.render() ;
            })

            // room data - mirrors backend data
            this.data = {} ;

            // room representations
            this.eTable = new Table() ;

            // users representations
            this.eUsers = {} ;

            // cards representations
            this.eCards = {} ;

            // room's conversation
            this.eConversation = new Conversation(document.body) ;


        }

        // (re)initializes the room data, synchronizing it with backend
        async refresh() {

            const resp = await call('GET', '/api/v1/rooms/{{room.id}}');
            const data = await resp.json();
            this.data = data["{{room.id}}"];

        }

        // starts to listen to room events
        listen() {

            if (this.listens) return ;
            this.listens = true ;

            // Listens when a new user joins the room
            listen( "RoomManager", "user:joined", async (throwerId, user_id) => {
                await this.refresh() ;
                if (user_id != "{{user.id}}") new Toast("info", `${this.data.users[user_id].name} joined the room`, "login-circle");
                this.render() ;
            })

            // Listens when a new user leaves the room
            listen( "RoomManager", "user:left", async (throwerId, user_id) => {
                await this.refresh() ;
                if (user_id != "{{user.id}}") new Toast("info", `${this.data.users[user_id].name} left the room`, "logout-circle");
                this.render() ;
            })

            // Listens when a room's user turns online
            listen( "RoomManager", "user:online", (throwerId, user_id) => {
                this.data.users[user_id].relation.status = "online" ;
                this.eUsers[user_id].status  = "online";
                if (user_id != "{{user.id}}") new Toast("info", `${this.data.users[user_id].name} is online`, "login-circle");                
            })

            // Listens when a room's user turns offline
            listen( "RoomManager", "user:offline", (throwerId, user_id) => {
                this.data.users[user_id].relation.status = "offline" ;
                this.eUsers[user_id].status  = "offline" ;
                if (user_id != "{{user.id}}") new Toast("info", `${this.data.users[user_id].name} is offline`, "logout-circle");  
            })

            // Listens when a user becomes player
            listen( "RoomManager", "user:player", (throwerId, user_id) => {
                this.data.users[user_id].relation.role = "player" ;
                this.eUsers[user_id].role    = "player" ;
                if (user_id != "{{user.id}}") new Toast("info", `${this.data.users[user_id].name} is now a room player`, "chess-line");
                if (user_id === "{{user.id}}") {
                    updateNewRoundButtonVisibility();
                    updateRoleButtonState();
                }
            })

            // Listens when a user becomes watcher
            listen( "RoomManager", "user:watcher", (throwerId, user_id) => {
                this.data.users[user_id].relation.role = "watcher" ;
                this.eUsers[user_id].role    = "watcher" ;
                if (user_id != "{{user.id}}") new Toast("info", `${this.data.users[user_id].name} is now a room spectator`, "glasses-fill");
                if (user_id === "{{user.id}}") {
                    updateNewRoundButtonVisibility();
                    updateRoleButtonState();
                }
            })

            // Listens when a user becomes master
            listen( "RoomManager", "user:master", (throwerId, user_id) => {
                this.data.users[user_id].relation.role = "master" ;
                this.eUsers[user_id].role    = "master" ;
                if (user_id != "{{user.id}}") new Toast("info", `${this.data.users[user_id].name} is now a room master`, "crown-line");
                if (user_id === "{{user.id}}") {
                    updateNewRoundButtonVisibility();
                    updateRoleButtonState();
                }
            })

            // Listens for a new round 
            listen( "RoomManager", "round:new", async (throwerId, user_id) => {
                
                values(this.eCards).forEach(cardObj => cardObj.remove());
                this.eConversation.flush();

                await this.refresh() ;
                new Toast("info", "New round started", "swap-box-line");
                this.render() ;

            })

            // Listens for a card peeked event
            listen( "RoomManager", "cards:*:peeked:*", (throwerId, update, eventName) => {

                const [_1, card_id, _3, user_id] = eventName.split(':');

                let card = this.data.cards[card_id]
                card.peeked[user_id] = update ;

                // if the card peeked is self's
                if (user_id === "{{user.id}}") {
                    this.eCards[card_id].peekedL = update;
                } 
                // if the card peeked is other user's
                else {
                    switch (update) {
                        case "True":
                            this.eCards[card_id].peekedU = "True";
                            break;
                       case "False":
                            const others = fromEntries( entries(card.peeked).filter(([key, _]) => key !== "{{user.id}}" ));
                            values(others).every( val => val === "False" ) ?
                                this.eCards[card_id].peekedU = "False" :
                                this.eCards[card_id].peekedU = "True" ;
                            break;
                    }
                }
 
            })

            // Listens for a card flipped event
            listen( "RoomManager", "cards:*:flipped", (throwerId, update, eventName) => {

                const [_1, card_id, _3] = eventName.split(':');

                let card = this.data.cards[card_id] ;
                card.flipped = update ;

                this.eCards[card_id].flipped = update;

            })

            // Listens when a new user leaves the room
            listen( "RoomManager", "message:new", (throwerId, message) => {
                
                console.log(message);
                console.log(`Received message ${message.author} : ${message.content}`);

                this.eConversation.addMessage(message.author, message.content);

            })


            // Track user {{user.id}} cursor and update other users

            const sendCursorPos = throttle( async (pageX, pageY) => {
            
                const table = document.getElementById("table");
                const rect = table.getBoundingClientRect();

                const rawX = (pageX - rect.left) / rect.width * 100;
                const rawY = (pageY - rect.top)  / rect.height * 100;
                const relX = parseFloat(rawX.toFixed(3));
                const relY = parseFloat(rawY.toFixed(3));

                if (relX < 0 || relX > 100 || relY < 0 || relY > 100) {
                    if (this.isCursorOutside) { return }
                    else { this.isCursorOutside = true }
                }
                else { this.isCursorOutside = false }
                
                await this.websocket.send(`cursor:move`,`${relX}:${relY}`);

            }, 100);

            document.addEventListener( 'mousemove', e => { sendCursorPos(e.pageX, e.pageY) } );
            
            // Listen for remote cursor moves
            listen("RoomManager", `user:*:cursor:move`, (throwerId, data, eventName) => {

                const [_1, user_id, _3, _4] = eventName.split(':');
                const position  = data.split(':');
                console.debug(`Received cursor move for user ${user_id} at ${position}`);

                if (user_id === "{{user.id}}") return; // skip self
                this.eUsers[user_id].position = position;

            });

        }

        // Renders the room
        render() {

            console.log(this.data)

            // RENDER USERS ----

            // remove users who are not in the room anymore            
            entries(this.eUsers).forEach( ([id, eUser]) => {
                if (!keys(this.data.users).some(user_id => user_id == id)) {
                    this.eUsers[id].remove() ;
                    delete this.eUsers[id] ;
                }
            })

            console.log(this.data.users)
            entries(this.data.users).forEach( ([user_id, user]) => {

                // ADDS USER IF DOES NOT EXIST
                if (!this.eUsers[user_id]) { this.createUser(user_id) }

                // RENDERS USER
                this.eUsers[user_id].name    = user.name ;
                this.eUsers[user_id].status  = user.relation.status ;
                this.eUsers[user_id].role    = user.relation.role ;

            });


            // RENDER CARDS ----

            console.log(this.data.users)
            entries(this.data.cards).forEach( ([card_id, card]) => {

                // ADDS CARD IF DOES NOT EXIST

                if ( !this.eCards[card_id] ) { this.createCard(card_id) ; }

                // RENDERS CARD

                this.eCards[card_id].value  = card.value ;
                this.eCards[card_id].owner  = this.data.users[card.player_id].name ;

                // lower-peeked property - for self
                card.peeked["{{user.id}}"] === "True" ?
                    this.eCards[card_id].peekedL = "True" :
                    this.eCards[card_id].peekedL = "False"

                // upper-peeked property - for other users
                const others = fromEntries( entries(card.peeked).filter(([key, _]) => key !== "{{user.id}}" ));
                values(others).every( val => val === "False" ) ?
                    this.eCards[card_id].peekedU = "False" :
                    this.eCards[card_id].peekedU = "True" ;

                // flpped property
                this.eCards[card_id].flipped    = card.flipped ;

                // assigns card to user
                this.eUsers[card.player_id].assignCard(this.eCards[card_id]);

            });

            // RENDER MESSAGES ----

            console.log('RENDER MESSAGES')
            console.log(this.data.messages)
            entries(this.data.messages).forEach( ([message_id, message]) => {

                console.log('render message')
                message = JSON.parse(message);
                this.eConversation.addMessage(message.author, message.content);

            });


        }


        // Creates a user object given a user_id 
        createUser(user_id) {

            if (this.eUsers[user_id]) {
                console.error(`User with id ${user_id} already exists`);
                return ;
            }
            console.log(`Create user with id ${user_id}`) ;

            this.eUsers[user_id] = {

                // representation of user's deck
                eUserDeck: new Deck(),

                // representation of the user in the panel
                eUserPanel: new PanelUser(),
                eRemoteCursor: new RemoteCursor(this.eTable.e, name),

                remove() {
                    this.eUserPanel.remove();
                },

                set name(name) {
                    this.eUserPanel.name = name;
                    this.eRemoteCursor.name = name;
                },
                set status(status) {
                    this.eUserPanel.status = status;
                },
                set role(role) {
                    this.eUserPanel.role = role;

                    role === "player" ?
                        this.eUserDeck.active(true) :
                        this.eUserDeck.active(false) ;

                },

                set position(position) {
                    this.eRemoteCursor.position = position ;
                },

                assignCard(card) {                    
                    this.eUserDeck.card = card.eCard.e ;
                }


            } ;

        }

        // creates a card object
        createCard(card_id) {

            if (this.eCards[card_id]) {
                console.error(`Card with id ${card_id} already exists`) ;
                return ;
            }

            console.log(`Create card with id ${card_id}`) ;
            this.eCards[card_id] = {

                // representation of the card
                eCard: new Card(card_id),

                remove() {
                    this.eCard.remove();
                },

                set value(value) { 
                    this.eCard.value    = value                     
                },
                set owner(owner) { 
                    this.eCard.owner    = owner ; 
                },                
                set peekedU(isPeeked) {
                    isPeeked  == "True" ? isPeeked = true  : isPeeked = false ;
                    this.eCard.peekedU   = isPeeked ; 
                },
                set peekedL(isPeeked) {
                    isPeeked  == "True" ? isPeeked = true  : isPeeked = false ;
                    this.eCard.peekedL   = isPeeked ; 
                },
                set flipped(isFlipped) {
                    isFlipped == "True" ? isFlipped = true : isFlipped = false ;
                    this.eCard.flipped  = isFlipped ;
                }

            } ;

        }

    };


    window.ROOM = new RoomManager() // Room Manager

    // ACCOUNT PANEL (Left)
    const accountPanel = new UserPanel('left', 'account-circle-line');

    // ROOM PANEL (Right)  
    const roomPanel = new RoomPanel('right', 'group-2-line');

    // Account Panel components are now initialized within the UserPanel class
    // Room Panel components are now initialized within the RoomPanel class

    // Floating New Round Button (lower left corner)
    const newRoundButton = new FloatingButton('refresh-line', document.body);
    newRoundButton.addClass('new-round');
    
    newRoundButton.callback = (async _ => {
        await call('POST', '/api/v1/rooms/{{room.id}}/round');
    });
    
    // Hide button initially, will be shown based on user role
    newRoundButton.e.style.display = 'none';

    // Create Floating Role Selection Buttons (authenticated users only)
    let roleButtons = {};
    {% if user.is_authenticated %}
    
    // Create individual role buttons (positioned via CSS)
    roleButtons.master = new FloatingButton('crown-line', document.body);
    roleButtons.master.addClass('role-button');
    roleButtons.master.e.setAttribute('data-role', 'master');
    
    roleButtons.player = new FloatingButton('chess-line', document.body);
    roleButtons.player.addClass('role-button');
    roleButtons.player.e.setAttribute('data-role', 'player');
    
    roleButtons.watcher = new FloatingButton('glasses-fill', document.body);
    roleButtons.watcher.addClass('role-button');
    roleButtons.watcher.e.setAttribute('data-role', 'watcher');
    
    // Role selection functionality
    function selectRole(role) {
        // Update visual state of role buttons
        Object.values(roleButtons).forEach(btn => {
            btn.removeClass('selected');
        });
        roleButtons[role].addClass('selected');
        
        // Make API call to change role
        call("PATCH", "/api/v1/rooms/{{room.id}}/user/{{user.id}}", {"role": role});
    }
    
    // Set up role button callbacks
    roleButtons.master.callback = () => selectRole('master');
    roleButtons.player.callback = () => selectRole('player');
    roleButtons.watcher.callback = () => selectRole('watcher');
    
    {% endif %}

    // Function to show/hide new round button based on user role
    function updateNewRoundButtonVisibility() {
        {% if user.is_authenticated %}
        const userRole = window.ROOM.data.users["{{user.id}}"]?.relation?.role;
        if (userRole === "master" || userRole === "player") {
            newRoundButton.e.style.display = 'flex';
        } else {
            newRoundButton.e.style.display = 'none';
        }
        {% else %}
        newRoundButton.e.style.display = 'none';
        {% endif %}
    }
    
    // Function to update role button visual state
    function updateRoleButtonState() {
        {% if user.is_authenticated %}
        const userRole = window.ROOM.data.users["{{user.id}}"]?.relation?.role;
        
        // Clear all selections
        Object.values(roleButtons).forEach(btn => {
            btn.removeClass('selected');
        });
        
        // Set current role as selected
        if (userRole && roleButtons[userRole]) {
            roleButtons[userRole].addClass('selected');
        }
        {% endif %}
    }

    document.addEventListener('DOMContentLoaded', async _ => {

        await call('POST', '/api/v1/rooms/{{room.id}}/join');

        await window.ROOM.refresh() ;
        window.ROOM.render();

        window.ROOM.listen();
        
        // Show/hide new round button based on user role
        updateNewRoundButtonVisibility();
        
        // Update role button state
        updateRoleButtonState();

    });

    </script>


{% endblock %}

