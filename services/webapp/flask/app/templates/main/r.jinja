{% extends 'layout.jinja' %}

{% block head %}

    <title>Tapis Vert::{{room_id}}</title>

    {% include 'main/elements/room.jinja' %}

{% endblock %}

{% block body %}

    <!-- OBJECTS ------ ------ ------ ------ -->
    <script>

    const ROOM = {

        // Representation of the Room in the page footer
        eFooterEntry: new RoomFooterEntry(),

        name(text)  { this.eFooterEntry.name = text  },
        round(text) { this.eFooterEntry.round = text }

    };

    const TABLE = {

        // Representation of the Table in the page 
        eTable: new Table()

    };

    const USERS = {

        // Stores the collection of users, indexed with their user_id
        _list: {},  

        _User: function() {

            // User's state, for reference
            this._name = null ;
            this._online = false ;

            // Representation of the User in the page footer
            this.eUserFooter = new UserFooter() ;

            // Representation of the User  as a Pawn on the Table
            this.eUserPawn = new Pawn() ;

            // Remove all User's representations
            this._remove = function() {
                this.eUserFooter.remove() ;
                this.eUserPawn.remove() ;
            } ;

            // Sets User's name
            this.name = function(name) {
                this._name = name ;
                this.eUserFooter.name = name ;
                this.eUserPawn.name = name ;
            };

            // Sets User's online status
            this.online = function(bool) {
                this._online = bool ;
                this.eUserFooter.online = bool ;
                this.eUserPawn.online = bool ;
            };

        },

        // Returns a User based on id
        get(user_id) { return this._list[user_id] },

        // Adds a new User
        add(user_id, name, online) {

            if (this._list[user_id]) 
                return console.warn(`User ${user_id} already registered: can't add`) ;

            this._list[user_id] = new this._User() ;

            // Initializes the User's elements
            this._list[user_id].name(name) ;
            this._list[user_id].online(online) ;

        },

        // Removes a User
        remove(user_id) {

            if (!this._list[user_id]) 
                return console.warn(`User ${user_id} not in room: can't remove`) ;

            this._list[user_id]._remove() ;
            delete this._list[user_id] ;
        },

    };


    const DECKS = {

        // Stores the collection of decks, indexed with the owner's user_id
        _list: {}, 

        _Deck: function() {

            // Representation of the Deck on the Table
            this.eDeck = new Deck() ;

            // Moves a Pawn into the Deck
            this.movePawn = function(pawn) { this.eDeck.pawn = pawn.e ; }

            // Moves a Card into the Deck
            this.moveCard = function(card) { this.eDeck.card = card.eCard.e ; }

        },

        // Returns a Deck based on id
        get(owner) { return this._list[owner] ; },

        // Adds a new Deck
        add(owner) {
            
            if (this._list[owner]) 
                return console.warn(`Deck ${owner} already registered: can't add`) ;

            this._list[owner] = new this._Deck() ;

        },

    }

    const CARDS = {

        // Stores the collection of cards, indexed with their value
        _list: {},

        _Card: function(value, owner) {

            // Card's state, for reference
            this._peeked = false ;
            this._flipped = false ;
            
            // Representation of the Card on the Table
            this.eCard = new Card() ;
            this.eCard.owner = owner ; 
            this.eCard.value = value ;

            // Peeks the card
            this.peeked = function(bool) {
                this._peeked = bool ;
                this.eCard.peeked = bool ;
            };

            // Flips the card
            this.flipped = function(bool) {
                this._flipped = bool ;
                this.eCard.flipped = bool ; 
            };

        },

        // Returns a Card based on value
        get(value) { return this._list[value] ; },

        // Adds a new Card
        add(value, owner) {
            
            if (this._list[value])
                return console.warn(`Card ${value} already registered: can't add`) ;

            this._list[value] = new this._Card(value, owner) ;

        },


    };
    </script>


    <!-- LISTENERS ------ ------ ------ ------ -->
    <script>

    // Room's websocket
    let websocket = new EventWebSocket("/ws/{{room_id}}/{{user_id}}") ;

    // Listens when a new user joins the room
    listen( "window", "room:user.joined", (throwerId, user_id) =>
        USERS.add(user_id, user_id, true)  
    )

    // Listens when a room's user turns online
    listen( "window", "room:user.online", (throwerId, user_id) =>             
        USERS.get(user_id).online(true)
    )

    // Listens when a room's user turns offline
    listen( "window", "room:user.offline", (throwerId, user_id) =>
        USERS.get(user_id).online(false) 
    )

    // Listens when a new user leaves the room
    listen( "window", "room:user.left", (throwerId, user_id) =>
        USERS.remove(user_id)  
    )

    </script>


    <script>

    // Sends a hello world
    websocket.wsend("hello") ;

    // Initializes the Room
    call('GET', '/api/v1/r/{{room_id}}')
    .then( r => r.json() )
    .then( r => {

        // Process Users

        u = r["room"]["users"] ;

        let user_id, props
        for ( [user_id, props] of Object.entries(u) ) {

            USERS.add(user_id, user_id) ;

            props["online"] == "1" ? 
                USERS.get(user_id).online(true) :
                USERS.get(user_id).online(false) ;

        } 

        // Process Cards
        
        c = r["room"]["cards"] ;
        
        let value
        for ( [value, props] of Object.entries(c) ) {

            owner = props["player"]

            DECKS.add(owner) ;
            CARDS.add(value, owner) ;

            DECKS.get(owner).moveCard(CARDS.get(value)) ;

            if ("{{user_id}}" == owner)  
                CARDS.get(value).peeked(value, true) ; 

            CARDS.get(value).flipped(true) ;

            USERS.get(owner) ?
                DECKS.get(owner).movePawn(USERS.get(owner).eUserPawn) :
                console.warn(`User ${owner} not in room, can't move pawn to deck`) ;

        } 

    })

    </script>


{% endblock %}

