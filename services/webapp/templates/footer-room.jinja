<!-- VIEWS ------ ------ ------ ------ ------ ------ ------ -->

    <link rel="stylesheet" href="{{ url_for('static', filename='styles/footer-room.css') }}">


    <!-- RoomFooterEntry -->

    <template id=t-room-footer-panel>
        <div class="room-footer-panel">

            <span class="title">Invite</span>
            <div class="c-qrcode"></div>

            <div class="hseparator"></div>
            <span class="title">Guests</span>

            
            <div class="users" id=users-masters>
                <!-- <svg></svg> goes here -->
                <span class="group">masters</span>
                <!-- Array of [ UserFooter ] -->
            </div>
            
            <div class="users" id=users-players>
                <!-- <svg></svg> goes here -->
                <span class="group">players</span>
                <!-- Array of [ UserFooter ] -->
            </div>
            
            <div class="users" id=users-watchers>
                <!-- <svg></svg> goes here -->
                <span class="group">watchers</span>
                <!-- Array of [ UserFooter ] -->
            </div>

            <div class="hseparator"></div>

            <div class="c-round" id="footer-round">
                <!-- Button for New Round -->
            </div>


        </div>
    </template>
    <script>

    class RoomFooterEntry extends FooterEntry {

        constructor() {

            super( "right-entries" )
            this.panel = build("t-room-footer-panel")
            
            let qr = new QRCode(this.footerPanel.select(".c-qrcode"))
            qr.updateLink("https://{{host}}/r/{{room.id}}")

            this.icon = "group-2-line"
            this.name = "{{room.name}}"


            this.newRound = new Button()

            this.footerPanel.select(".c-round").append(this.newRound.e)
            this.newRound.name = "new round"
            this.newRound.icon = "refresh-line"
            this.newRound.color = "green"

            this.newRound.callback = ( async _ => {

                await call('POST', '/api/v1/rooms/{{room.id}}/round')

            })

            const svgM = new SVG("crown-line");
            document.getElementById("users-masters").prepend(svgM.e)
            document.getElementById("users-masters").onclick = ( _ => { 
                call("PATCH","/api/v1/rooms/{{room.id}}/user/{{user.id}}",{"role": "master"})
                this.role = "master"
            })

            const svgP = new SVG("chess-line");
            document.getElementById("users-players").prepend(svgP.e)
            document.getElementById("users-players").onclick = ( _ => { 
                call("PATCH","/api/v1/rooms/{{room.id}}/user/{{user.id}}",{"role": "player"})
                this.role = "player"
            })

            const svgW = new SVG("glasses-fill");
            document.getElementById("users-watchers").prepend(svgW.e)
            document.getElementById("users-watchers").onclick = ( _ => { 
                call("PATCH","/api/v1/rooms/{{room.id}}/user/{{user.id}}",{"role": "watcher"})
                this.role = "watcher"
            })


        }

        {% if user.is_authenticated %}

        {# set role(role) {

            switch(role) {
                case "master":  {
                    this.footerPanel.select(".choice[master]").setAttribute("active","") ;
                    this.footerPanel.select(".choice[player]").removeAttribute("active") ;
                    this.footerPanel.select(".choice[watcher]").removeAttribute("active") ;
                    break ;
                }
                case "player": {
                    this.footerPanel.select(".choice[master]").removeAttribute("active") ;
                    this.footerPanel.select(".choice[player]").setAttribute("active","") ;
                    this.footerPanel.select(".choice[watcher]").removeAttribute("active") ;
                    break ;
                }
                case "watcher": {
                    this.footerPanel.select(".choice[master]").removeAttribute("active") ;
                    this.footerPanel.select(".choice[player]").removeAttribute("active") ;
                    this.footerPanel.select(".choice[watcher]").setAttribute("active","") ;
                    break ;
                }
                default:
                    console.error(`Role "${role}" isn't supported option for user`);
                    return
            }
        } #}

        {% endif %}


    }
    </script>


    <!-- UserFooter -->
    
    <template id=t-user>
        <div class="user">
            <span class=name></span>
            <div class=status rounded></div>
        </div>
    </template>
    <script>
    class UserFooter extends Element {

        constructor(){

            super( build("t-user") )
            console.log("UserFooter created")

        }

        set name(text)      { this.select(".name").innerText = text ; }

        set status(status)  { status == "online" ? 
                                this.select(".status").setAttribute("online", "") : 
                                this.select(".status").removeAttribute("online") 
                            }

        set role(role)          {
            let parent 
            switch(role) {
                case "master":  parent = document.getElementById("users-masters")  ; break ;
                case "player":  parent = document.getElementById("users-players")  ; break ;
                case "watcher": parent = document.getElementById("users-watchers") ; break ;
                default:
                    console.error(`Role "${role}" isn't supported option for user`);
                    return
            }
            console.log(`User ${this.select(".name").innerText} moved to "${role}s"`);
            parent.append(this.e)
        }


    }
    </script>



