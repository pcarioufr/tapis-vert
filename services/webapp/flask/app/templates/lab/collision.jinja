<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Collision Avoidance with Elastic Labels</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: Arial, sans-serif;
            height: 100vh;
            display: flex;
            justify-content: center;
            align-items: center;
            overflow: hidden;
            position: relative;
        }

        .dot {
            width: 30px;
            height: 30px;
            background-color: #333;
            border-radius: 50%;
            position: absolute;
            cursor: pointer;
            transition: left 0.2s ease, top 0.2s ease;
        }

        .label {
            position: absolute;
            background-color: #f0ad4e;
            color: white;
            padding: 5px 10px;
            border-radius: 5px;
            font-size: 12px;
            white-space: nowrap;
            transform: translate(-50%, -100%);
            transition: transform 0.3s ease;
        }
    </style>
</head>
<body>

    <div class="dot" style="top: 100px; left: 100px;" data-label="Dot 1"></div>
    <div class="dot" style="top: 200px; left: 150px;" data-label="Dot 2"></div>
    <div class="dot" style="top: 250px; left: 300px;" data-label="Dot 3"></div>
    <div class="dot" style="top: 150px; left: 400px;" data-label="Dot 4"></div>

    <script>
        const dots = document.querySelectorAll('.dot');
        const labelRadius = 30;  // Initial label distance from the dot center
        const collisionPushDistance = 50; // Distance to push in case of collision

        dots.forEach(dot => {
            const label = document.createElement('div');
            label.classList.add('label');
            label.innerText = dot.getAttribute('data-label');
            document.body.appendChild(label);
            updateLabelPosition(dot, label, labelRadius);
            dot.label = label;
        });

        function updateLabelPosition(dot, label, distance) {
            const { top, left, width } = dot.getBoundingClientRect();
            label.style.top = `${top - distance}px`;
            label.style.left = `${left + width / 2}px`;
        }

        function resolveCollisions() {
            dots.forEach((dot1, i) => {
                let adjustedPosition = labelRadius;
                dots.forEach((dot2, j) => {
                    if (i !== j) {
                        const rect1 = dot1.label.getBoundingClientRect();
                        const rect2 = dot2.label.getBoundingClientRect();

                        if (!(rect1.right < rect2.left || rect1.left > rect2.right || rect1.bottom < rect2.top || rect1.top > rect2.bottom)) {
                            adjustedPosition = collisionPushDistance;
                        }
                    }
                });
                updateLabelPosition(dot1, dot1.label, adjustedPosition);
            });
        }

        let draggedDot = null;
        let offsetX = 0, offsetY = 0;

        dots.forEach(dot => {
            dot.addEventListener('mousedown', (e) => {
                draggedDot = dot;
                offsetX = e.clientX - dot.getBoundingClientRect().left;
                offsetY = e.clientY - dot.getBoundingClientRect().top;
                dot.style.zIndex = '1000';
            });
        });

        document.addEventListener('mousemove', (e) => {
            if (draggedDot) {
                draggedDot.style.left = `${e.clientX - offsetX}px`;
                draggedDot.style.top = `${e.clientY - offsetY}px`;

                updateLabelPosition(draggedDot, draggedDot.label, labelRadius);
                resolveCollisions();
            }
        });

        document.addEventListener('mouseup', () => {
            if (draggedDot) {
                draggedDot.style.zIndex = 'initial';
                draggedDot = null;
            }
        });
    </script>

</body>
</html>
