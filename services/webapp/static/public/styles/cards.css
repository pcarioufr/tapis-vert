
@property --lower-grad-start {
    syntax: '<percentage>';
    inherits: false;
    initial-value: 2%;
}
@property --lower-grad-end {
    syntax: '<percentage>';
    inherits: false;
    initial-value: 5%;
}

@property --upper-grad-start {
    syntax: '<percentage>';
    inherits: false;
    initial-value: 2%;
}
@property --upper-grad-end {
    syntax: '<percentage>';
    inherits: false;
    initial-value: 5%;
}


/* Container for the card */

.c-card {
    width: var(--card-w);
    height: var(--card-h);
    position: relative;
    cursor: pointer;
    filter: drop-shadow(0.4vw 0.4vw 0.2vw rgba(0, 0, 0, 0.5))
}


/* Card */
.card {
    width: 100%;
    height: 100%;
    position: relative;
    transform-style: preserve-3d; /* Ensures both front and back are in 3D */
    transition: transform 0.6s; /* Flip animation */

    transform: rotateZ(var(--card-rotation));
    
}

/* When the card is flipped */
[flipped].card {
    transform: rotateZ(var(--card-rotation)) rotateY(180deg); /* Flip the card */
}

/* Card faces */
.card .face {
    position: absolute;
    width: 100%;
    height: 100%;
    backface-visibility: hidden;
    display: flex;
    justify-content: center;
    align-items: center;
    color: white;
    border-radius: 2vw;
}

/* Front of the card */
.card .face.front {
    background-color: var(--beige);
    clip-path: polygon( 
        0% 0%, 
        0% 100%, 
        calc( 100% - var(--card-c)) 100%, 
        100% calc(100% - var(--card-c)), 
        100% 0%    
    );
    font-size: 12vw;
    color: var(--dblue);

}

/* Back face of the card */
.card .face.back {

    position: absolute;
    width: 100%;
    height: 100%;

    transform: rotateY(180deg); /* The back face is rotated backwards initially */
    backface-visibility: hidden;

    background: var(--bblue) ; /* This is overriden by [peeked] section */
    font-size: 3vw;
    color: var(--beige);

    border-color: var(--beige);
    border-style: solid;
    border-width: 2px;
    box-sizing: border-box;

}

/* CARD CORNERS & PEEKING EFFECT */

/* Clipping cards to leave room for peeking corner */

.card .face.back {
    clip-path: polygon( 
                    0% 0%, 
                    0% calc( 100% - var(--card-c)), 
                    var(--card-c) 100%, 
                    100% 100%, 
                    100% var(--card-c), 
                    calc( 100% - var(--card-c)) 0%, 
                    100% 0% 
                );
}
.card .face.front {
    clip-path: polygon( 
                    0% var(--card-c),
                    0% 100%,
                    calc( 100% - var(--card-c)) 100%,
                    100% calc(100% - var(--card-c)), 
                    100% 0%,
                    var(--card-c) 0%
                );
}


/* Corners */

.card .card-corner {
    position: absolute;
    width: var(--card-c);
    height: var(--card-c);
    backface-visibility: hidden;
    border-color: var(--beige);
    border-style: solid;
    border-width: 2px;
    box-sizing: border-box;
    transform: rotate3d(1, 1, 0, 0deg); /* No initial rotation */
    transform-origin: center center;
    transition: transform 0.5s ease-in-out;
    will-change: transform;
}

/* LOWER CORNER */
.card .card-corner.lower {
    border-radius: 0 0 2vw 0;
    bottom: 0;
    right: 0;
    clip-path: polygon(100% 0, 0 100%, 100% 100%)
}

/* down corner - front */
.card .card-corner.lower.front {
    background-color: var(--beige); /* Back color */
    backface-visibility: hidden;
    display: flex;
}

.card .card-corner.lower.front span {
    position: relative;
    margin: auto;
    transform: rotate(135deg);
    padding-bottom: 4vw;
    font-size: 3vw;
    color: var(--dblue);
}

/* down corner - back */
.card .card-corner.lower.back {
    background-color: var(--dblue); /* Back color */
    backface-visibility: hidden;
    transform: rotate3d(0, 1, 0, 180deg) rotate3d(0, 0, 1, 90deg);

    border-color: var(--beige);
    border-style: solid;
    border-width: 2px;
    box-sizing: border-box;

    background: radial-gradient(
        ellipse
        calc(120% + 75% * cos(var(--card-rotation) + 215deg))
        calc(60% + 30% * sin(var(--card-rotation) + 215deg))
        at top left,
        var(--bblue) var(--lower-grad-start),
        var(--dblue) var(--lower-grad-end)
    );
    transition: --lower-grad-start 0.2s ease-in-out, --lower-grad-end 0.2s ease-in-out, transform 0.5s ease-in-out;

}

[peeked-lower].card .card-corner.lower.back {
    --lower-grad-start: 80%;
    --lower-grad-end: 250%;
}


/* Front corner lifts and back of the corner is revealed */
[flipped][peeked-lower].card .card-corner.lower.front {
    transform: rotate3d(-1, 1, 0, 130deg); /* Rotate to lift the corner */
}

/* Back corner follows the movement */
[flipped][peeked-lower].card .card-corner.lower.back {
    transform: rotate3d(0, 1, 0, 180deg) rotate3d(0, 0, 1, 90deg) rotate3d(-1, 1, 0, -130deg); 
}


/* UPPER CORNER */
.card .card-corner.upper {
    border-radius: 2vw 0 0 0;
    top: 0;
    left: 0;
    clip-path: polygon(0 0, 0 100%, 100% 0)   
}


/* Up corner - front */
.card .card-corner.upper.front {
    background-color: var(--beige); /* Back color */
    backface-visibility: hidden;
    display: flex;
}

.card .card-corner.upper.front span {
    position: relative;
    margin: auto;
    transform: rotate(-45deg);
    padding-bottom: 4vw;
    font-size: 3vw;
    color: var(--dblue);
}

/* Up corner back */

.card .card-corner.upper.back {
    backface-visibility: hidden;
    transform: rotate3d(0, 1, 0, 180deg) rotate3d(0, 0, 1, 90deg);

    background: radial-gradient(
        ellipse
        calc(120% + 75% * cos(var(--card-rotation) + 135deg))
        calc(60% + 30% * sin(var(--card-rotation) + 135deg))
        at bottom right,
        var(--bblue) var(--upper-grad-start),
        var(--dblue) var(--upper-grad-end)
    );
    transition: --upper-grad-start 0.5s ease-in-out, --upper-grad-end 0.5s ease-in-out, transform 0.5s ease-in-out;

    border-color: var(--beige);
    border-style: solid;
    border-width: 2px;
    box-sizing: border-box;

}

[peeked-upper].card .card-corner.upper.back {
    --upper-grad-start: 80%;
    --upper-grad-end: 170%;
}


/* Front corner lifts and back of the corner is revealed */
[flipped][peeked-upper].card .card-corner.upper.front {
    transform: rotate3d(-1, 1, 0, -70deg); /* Rotate to lift the corner */
}

/* Back corner follows the movement */
[flipped][peeked-upper].card .card-corner.upper.back {
    transform: rotate3d(0, 1, 0, 180deg) rotate3d(0, 0, 1, 90deg) rotate3d(-1, 1, 0, -70deg); 
}


/* Shadow effect on peeked card */
.card .face.back {
    /* radial-gradient used for dynamic shadows. We combine properties here for clarity */
    background: 
    radial-gradient(
        ellipse 
        calc(120% + 75% * cos(var(--card-rotation) - 45deg)) calc(60% + 30% * sin(var(--card-rotation) - 45deg)) 
        at bottom left, 
        var(--bblue) var(--lower-grad-start), 
        var(--dblue) var(--lower-grad-end),
        transparent 80%
    ),
    radial-gradient(
        ellipse
        calc(120% + 75% * cos(var(--card-rotation) + 135deg))
        calc(60% + 30% * sin(var(--card-rotation) + 135deg))
        at top right,
        var(--bblue) var(--upper-grad-start),
        var(--dblue) var(--upper-grad-end),
        transparent 80%
    ), var(--dblue);
    transition: --upper-grad-start 0.5s, --upper-grad-end 0.5s, --lower-grad-start 0.5s, --lower-grad-end 0.5s ;

}

[peeked-upper].card .face.back {
    --upper-grad-start: 30%;
    --upper-grad-end: 60%;
}

[peeked-lower].card .face.back {
    --lower-grad-start: 30%;
    --lower-grad-end: 60%;
}
