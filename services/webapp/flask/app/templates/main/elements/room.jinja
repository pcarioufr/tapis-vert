    <!-- VIEWS ------ ------ ------ ------ ------ ------ ------ -->

    <link rel="stylesheet" href="{{ url_for('static', filename='styles/elements/room.css') }}">


    <!-- RoomFooterEntry -->

    <template id=t-room-footer-panel>
        <div class="room-footer-panel">
            <span class="title">invite</span>
            <div class="c-qrcode"></div>
            <span class="title">players</span>
            <div class="users" id="footer-users">
                <!-- Array of [ UserFooter ] -->
            </div>
            <div class="c-round" id="footer-round">
                <!-- Button ofr New Round -->
            </div>
        </div>
    </template>
    <script>

    class RoomFooterEntry extends FooterEntry {

        constructor() {

            super( "right-entries" )
            this.panel = build("t-room-footer-panel")
            
            let qr = new QRCode(this.footerPanel.select(".c-qrcode"))
            qr.link = "https://{{host}}/r/{{room.id}}"

            this.icon = "group-2-line"
            this.name = "{{room.name}}"


            this.newRound = new Button()

            this.footerPanel.select(".c-round").append(this.newRound.e)
            this.newRound.name = "new round"
            this.newRound.icon = "refresh-line"
            this.newRound.color = "green"

            this.newRound.callback = ( _ => {

                    call('POST', '/api/v1/rooms/{{room.id}}/round')
                    .then( r => r.json() )
                    .then( r => { } )

                })

        }

    }
    </script>


    <!-- UserFooter -->
    
    <template id=t-user>
        <div class="user">
            <span class=name></span>
            <div class=status rounded></div>
        </div>
    </template>
    <script>
    class UserFooter extends Element {

        constructor(){

            super( build("t-user"), document.getElementById("footer-users"))


        }

        set name(text)      { this.select(".name").innerText = text ; this.id = text}

        set online(bool)    { bool ? 
                                this.select(".status").setAttribute("online", "") : 
                                this.select(".status").removeAttribute("online") 
                            }

        remove()            { this.e.remove() }

    }
    </script>



    <!-- Pawn -->

    <template id=t-pawn>
        <div class="pawn">
            <div class="head"></div>
            <div class="body"></div>
            <div class="label">
                <span class="name"></span>
                <div class="status"></div>
            </div>
        </div>
    </template>

    <script>

    class Pawn extends Element {

        constructor(){

            super( build("t-pawn"), document.getElementById("table-area"))

        }

        set name(text)      { this.select(".name").innerText = text ; this.id = text}

        set online(bool)    { bool ? 
                                this.select(".status").setAttribute("online", "") : 
                                this.select(".status").removeAttribute("online") 
                            }

    }
    </script>



    <!-- Deck -->

    <template id=t-deck>
        <div class="deck">
            <div class="card-slot"> <!-- Card --> </div>
            <div class="pawn-slot"> <!-- Pawn --> </div>
        </div>
    </template>

    <script>

    class Deck extends Element {

        constructor(){

            super( build("t-deck"), document.getElementById("table-playground"))

        }

        set pawn(element)  {
            this.select(".pawn-slot").append(element)
        }

        set card(element) {
            this.select(".card-slot").append(element)
        }
        
    }
    </script>


    <!-- Card -->

    <template id=t-card>
        <div class="card"> <!-- [flipped], [peeked] -->    
            <div class="face front"></div>
            <div class="face back"></div>
            <div class="corner front">
                <span></span>
            </div>
            <div class="corner back"></div>
        </div>
    </template>

    <script>
    class Card extends Element {

        constructor(){

            super( build("t-card") )

            // Toggle the corner peek effect on click
            this.select('.face.back').addEventListener('click', _ => {
                this.toggle('peeked');
            });

            // Flips the card on double-click
            this.e.addEventListener('dblclick', _ => {
                this.untag('peeked');  // no peek while flipping the card
                this.toggle('flipped');
            });


        }

        set owner(text)      { 
                                this.select(".face.back" ).innerText = text 
                                // this.select(".back  span.name" ).innerText = text
                            }
        set value(text)     {   
                                this.select(".face.front").innerText = text
                                this.select(".corner.front span").innerText = text 
                            }

        set peeked(bool)  { bool ? this.tag("peeked")  : this.untag("peeked")  ; }
        set flipped(bool) { bool ? this.tag("flipped") : this.untag("flipped") ; }

    }
    </script>


    <!-- Table -->

    <template id=t-table>
        <div class="table" id="table">
            <div class="area" id="table-area">
                <!-- SVG Crown-->
                <!-- [ Pawns ] -->
            </div>
            <div class="playground" id="table-playground">
                <!-- [ Cards ] -->
            </div>
        </div>
    </template>
    <script>
    class Table extends Element {

        constructor(){

            super( build("t-table"), document.body)

            this.svg = new SVG("crown-line")
            this.select(".area").append(this.svg.e)

        }

        empty() { this.e.querySelectorAll('*').forEach( n => n.remove() ); }

    }
    </script>